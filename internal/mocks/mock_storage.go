// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mkarulina/url-reduction-service/internal/storage (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/mkarulina/url-reduction-service/internal/storage"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddLinkToDB mocks base method.
func (m *MockStorage) AddLinkToDB(arg0 *storage.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLinkToDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLinkToDB indicates an expected call of AddLinkToDB.
func (mr *MockStorageMockRecorder) AddLinkToDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLinkToDB", reflect.TypeOf((*MockStorage)(nil).AddLinkToDB), arg0)
}

// DeleteUrls mocks base method.
func (m *MockStorage) DeleteUrls(arg0 ...chan storage.UserKeys) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUrls", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUrls indicates an expected call of DeleteUrls.
func (mr *MockStorageMockRecorder) DeleteUrls(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUrls", reflect.TypeOf((*MockStorage)(nil).DeleteUrls), arg0...)
}

// GetAllUrlsByUserID mocks base method.
func (m *MockStorage) GetAllUrlsByUserID(arg0 string) ([]storage.ResponseLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUrlsByUserID", arg0)
	ret0, _ := ret[0].([]storage.ResponseLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUrlsByUserID indicates an expected call of GetAllUrlsByUserID.
func (mr *MockStorageMockRecorder) GetAllUrlsByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUrlsByUserID", reflect.TypeOf((*MockStorage)(nil).GetAllUrlsByUserID), arg0)
}

// GetKeyByLink mocks base method.
func (m *MockStorage) GetKeyByLink(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyByLink", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetKeyByLink indicates an expected call of GetKeyByLink.
func (mr *MockStorageMockRecorder) GetKeyByLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyByLink", reflect.TypeOf((*MockStorage)(nil).GetKeyByLink), arg0)
}

// GetLinkByKey mocks base method.
func (m *MockStorage) GetLinkByKey(arg0 string) *storage.Link {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkByKey", arg0)
	ret0, _ := ret[0].(*storage.Link)
	return ret0
}

// GetLinkByKey indicates an expected call of GetLinkByKey.
func (mr *MockStorageMockRecorder) GetLinkByKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkByKey", reflect.TypeOf((*MockStorage)(nil).GetLinkByKey), arg0)
}

// ShortenLink mocks base method.
func (m *MockStorage) ShortenLink(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenLink", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenLink indicates an expected call of ShortenLink.
func (mr *MockStorageMockRecorder) ShortenLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenLink", reflect.TypeOf((*MockStorage)(nil).ShortenLink), arg0, arg1)
}
