// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mkarulina/url-reduction-service/internal/handlers (interfaces: Handler)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// BatchLinksHandler mocks base method.
func (m *MockHandler) BatchLinksHandler(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BatchLinksHandler", arg0, arg1)
}

// BatchLinksHandler indicates an expected call of BatchLinksHandler.
func (mr *MockHandlerMockRecorder) BatchLinksHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchLinksHandler", reflect.TypeOf((*MockHandler)(nil).BatchLinksHandler), arg0, arg1)
}

// GetAllUrlsHandler mocks base method.
func (m *MockHandler) GetAllUrlsHandler(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllUrlsHandler", arg0, arg1)
}

// GetAllUrlsHandler indicates an expected call of GetAllUrlsHandler.
func (mr *MockHandlerMockRecorder) GetAllUrlsHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUrlsHandler", reflect.TypeOf((*MockHandler)(nil).GetAllUrlsHandler), arg0, arg1)
}

// GetLinkHandler mocks base method.
func (m *MockHandler) GetLinkHandler(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetLinkHandler", arg0, arg1)
}

// GetLinkHandler indicates an expected call of GetLinkHandler.
func (mr *MockHandlerMockRecorder) GetLinkHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkHandler", reflect.TypeOf((*MockHandler)(nil).GetLinkHandler), arg0, arg1)
}

// PingHandler mocks base method.
func (m *MockHandler) PingHandler(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PingHandler", arg0, arg1)
}

// PingHandler indicates an expected call of PingHandler.
func (mr *MockHandlerMockRecorder) PingHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingHandler", reflect.TypeOf((*MockHandler)(nil).PingHandler), arg0, arg1)
}

// PostLinkHandler mocks base method.
func (m *MockHandler) PostLinkHandler(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostLinkHandler", arg0, arg1)
}

// PostLinkHandler indicates an expected call of PostLinkHandler.
func (mr *MockHandlerMockRecorder) PostLinkHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostLinkHandler", reflect.TypeOf((*MockHandler)(nil).PostLinkHandler), arg0, arg1)
}

// ShortenHandler mocks base method.
func (m *MockHandler) ShortenHandler(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShortenHandler", arg0, arg1)
}

// ShortenHandler indicates an expected call of ShortenHandler.
func (mr *MockHandlerMockRecorder) ShortenHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenHandler", reflect.TypeOf((*MockHandler)(nil).ShortenHandler), arg0, arg1)
}
